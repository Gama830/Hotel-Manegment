# Generated by Django 5.2.6 on 2025-09-18 03:13

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('booking', '0001_initial'),
        ('guest', '0001_initial'),
        ('rooms', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='NotificationTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Template name for identification', max_length=100)),
                ('template_type', models.CharField(choices=[('BOOKING_CONFIRMATION', 'Booking Confirmation'), ('CHECKIN_REMINDER', 'Check-in Reminder'), ('PAYMENT_REMINDER', 'Payment Reminder'), ('WELCOME_MESSAGE', 'Welcome Message'), ('CHECKOUT_REMINDER', 'Check-out Reminder'), ('DIGITAL_KEY_DELIVERY', 'Digital Key Delivery'), ('BOOKING_MODIFICATION', 'Booking Modification'), ('CANCELLATION_CONFIRMATION', 'Cancellation Confirmation')], help_text='Type of notification template', max_length=30)),
                ('channel', models.CharField(choices=[('EMAIL', 'Email'), ('SMS', 'SMS'), ('BOTH', 'Email and SMS')], default='EMAIL', help_text='Notification delivery channel', max_length=10)),
                ('subject', models.CharField(help_text='Email subject line (supports template variables)', max_length=200)),
                ('email_content', models.TextField(help_text='Email content (supports HTML and template variables)')),
                ('sms_content', models.TextField(blank=True, help_text='SMS content (plain text, supports template variables)')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this template is currently active')),
                ('send_delay_minutes', models.IntegerField(default=0, help_text='Delay in minutes before sending notification')),
                ('variables_help', models.TextField(blank=True, help_text='Available template variables and their descriptions')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Notification Template',
                'verbose_name_plural': 'Notification Templates',
                'ordering': ['template_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='CheckIn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('check_in_id', models.CharField(help_text='Unique check-in identifier', max_length=20, unique=True)),
                ('actual_check_in_date_time', models.DateTimeField(default=django.utils.timezone.now, help_text='Actual date and time of check-in')),
                ('id_proof_verified', models.BooleanField(default=False, help_text="Whether guest's ID proof has been verified")),
                ('payment_status', models.CharField(choices=[('PENDING', 'Pending'), ('PARTIAL', 'Partial Payment'), ('PAID', 'Fully Paid'), ('REFUNDED', 'Refunded')], default='PENDING', help_text='Current payment status', max_length=10)),
                ('assigned_staff', models.CharField(blank=True, help_text='Staff member who handled the check-in', max_length=100, null=True)),
                ('remarks_notes', models.TextField(blank=True, help_text='Additional remarks or notes about the check-in', null=True)),
                ('expected_check_out_date', models.DateField(blank=True, help_text='Expected check-out date', null=True)),
                ('number_of_guests', models.PositiveIntegerField(default=1, help_text='Total number of guests checking in')),
                ('advance_payment', models.DecimalField(decimal_places=2, default=0.0, help_text='Advance payment received', max_digits=10)),
                ('total_amount', models.DecimalField(decimal_places=2, default=0.0, help_text='Total amount for the stay', max_digits=10)),
                ('base_tariff', models.DecimalField(decimal_places=2, default=0.0, help_text='Base room tariff', max_digits=10, null=True)),
                ('gst_type', models.CharField(choices=[('INCLUDING', 'Including GST'), ('EXCLUDING', 'Excluding GST')], default='EXCLUDING', help_text='Whether tariff includes GST', max_length=20)),
                ('cgst_rate', models.DecimalField(decimal_places=2, default=9.0, help_text='CGST rate in percentage', max_digits=5)),
                ('sgst_rate', models.DecimalField(decimal_places=2, default=9.0, help_text='SGST rate in percentage', max_digits=5)),
                ('discount_amount', models.DecimalField(decimal_places=2, default=0.0, help_text='Discount amount', max_digits=10)),
                ('final_amount', models.DecimalField(decimal_places=2, help_text='Final amount after GST and discount', max_digits=10, null=True)),
                ('digital_key_issued', models.BooleanField(default=False, help_text='Track if digital key card has been issued')),
                ('mobile_checkin', models.BooleanField(default=False, help_text='Track if check-in was done via mobile')),
                ('checkin_duration', models.DurationField(blank=True, help_text='Time taken to complete check-in process', null=True)),
                ('satisfaction_rating', models.IntegerField(blank=True, help_text='Guest satisfaction rating (1-5)', null=True)),
                ('workflow_completed', models.BooleanField(default=False, help_text='Whether check-in workflow is completed')),
                ('checkin_method', models.CharField(choices=[('FRONT_DESK', 'Front Desk'), ('MOBILE', 'Mobile Check-in'), ('KIOSK', 'Self-Service Kiosk')], default='FRONT_DESK', help_text='Method used for check-in', max_length=20)),
                ('id_verification_method', models.CharField(blank=True, choices=[('MANUAL', 'Manual Verification'), ('DIGITAL', 'Digital Verification'), ('AUTOMATED', 'Automated Verification')], help_text='Method used for ID verification', max_length=20)),
                ('welcome_package_provided', models.BooleanField(default=False, help_text='Whether welcome package was provided')),
                ('special_requests_fulfilled', models.BooleanField(default=False, help_text='Whether special requests were fulfilled')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('booking', models.ForeignKey(blank=True, help_text='Associated booking (if pre-booked)', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='check_ins', to='booking.booking')),
                ('guest', models.ForeignKey(help_text='Primary guest checking in', on_delete=django.db.models.deletion.CASCADE, related_name='check_ins', to='guest.guest')),
                ('room_number', models.ForeignKey(help_text='Room assigned for check-in', on_delete=django.db.models.deletion.CASCADE, related_name='check_ins', to='rooms.room')),
            ],
            options={
                'verbose_name': 'Check-In',
                'verbose_name_plural': 'Check-Ins',
                'ordering': ['-actual_check_in_date_time'],
            },
        ),
        migrations.CreateModel(
            name='CheckInWorkflow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('steps_completed', models.JSONField(default=list, help_text='List of completed workflow steps')),
                ('current_step', models.CharField(choices=[('BOOKING_RETRIEVAL', 'Booking Information Retrieval'), ('ID_VERIFICATION', 'ID Verification'), ('PAYMENT_PROCESSING', 'Payment Processing'), ('ROOM_ASSIGNMENT', 'Room Assignment'), ('KEY_GENERATION', 'Key Card Generation'), ('COMPLETION', 'Check-in Completion')], default='BOOKING_RETRIEVAL', help_text='Current step in the check-in workflow', max_length=50)),
                ('workflow_data', models.JSONField(default=dict, help_text='Store intermediate data during check-in process')),
                ('started_at', models.DateTimeField(auto_now_add=True, help_text='When the check-in workflow started')),
                ('completed_at', models.DateTimeField(blank=True, help_text='When the check-in workflow was completed', null=True)),
                ('checkin', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='workflow', to='checkin.checkin')),
            ],
            options={
                'verbose_name': 'Check-In Workflow',
                'verbose_name_plural': 'Check-In Workflows',
            },
        ),
        migrations.CreateModel(
            name='DigitalKeyCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key_code', models.CharField(help_text='Unique digital key code', max_length=50, unique=True)),
                ('qr_code_data', models.TextField(blank=True, help_text='QR code data for mobile scanning')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this key is currently active')),
                ('expires_at', models.DateTimeField(help_text='When this key expires')),
                ('access_count', models.IntegerField(default=0, help_text='Number of times this key has been used')),
                ('last_used_at', models.DateTimeField(blank=True, help_text='When this key was last used', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('checkin', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='digital_keys', to='checkin.checkin')),
            ],
            options={
                'verbose_name': 'Digital Key Card',
                'verbose_name_plural': 'Digital Key Cards',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='GuestFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feedback_type', models.CharField(choices=[('CHECKIN', 'Check-in Experience'), ('ROOM', 'Room Quality'), ('SERVICE', 'Service Quality'), ('OVERALL', 'Overall Experience'), ('COMPLAINT', 'Complaint'), ('SUGGESTION', 'Suggestion')], default='OVERALL', help_text='Type of feedback', max_length=20)),
                ('rating', models.IntegerField(blank=True, choices=[(1, 'Very Poor'), (2, 'Poor'), (3, 'Average'), (4, 'Good'), (5, 'Excellent')], help_text='Rating from 1-5', null=True)),
                ('comments', models.TextField(blank=True, help_text='Guest comments and feedback')),
                ('is_anonymous', models.BooleanField(default=False, help_text='Whether feedback is submitted anonymously')),
                ('staff_response', models.TextField(blank=True, help_text='Staff response to feedback')),
                ('is_resolved', models.BooleanField(default=False, help_text='Whether issue has been resolved')),
                ('follow_up_required', models.BooleanField(default=False, help_text='Whether follow-up is required')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('checkin', models.ForeignKey(help_text='Associated check-in', on_delete=django.db.models.deletion.CASCADE, related_name='feedback', to='checkin.checkin')),
            ],
            options={
                'verbose_name': 'Guest Feedback',
                'verbose_name_plural': 'Guest Feedback',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MobileCheckInSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_id', models.CharField(help_text='Unique session identifier', max_length=50, unique=True)),
                ('guest_email', models.EmailField(help_text='Guest email used for session', max_length=254)),
                ('confirmation_number', models.CharField(blank=True, help_text='Booking confirmation number used', max_length=50)),
                ('status', models.CharField(choices=[('STARTED', 'Started'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed'), ('ABANDONED', 'Abandoned'), ('FAILED', 'Failed')], default='STARTED', help_text='Current session status', max_length=20)),
                ('device_info', models.JSONField(default=dict, help_text='Device and browser information')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='Client IP address', null=True)),
                ('steps_completed', models.JSONField(default=list, help_text='List of completed check-in steps')),
                ('session_data', models.JSONField(default=dict, help_text='Session data and form inputs')),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, help_text='When session was completed', null=True)),
                ('last_activity_at', models.DateTimeField(auto_now=True, help_text='Last activity timestamp')),
                ('booking', models.ForeignKey(blank=True, help_text='Associated booking', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mobile_sessions', to='booking.booking')),
            ],
            options={
                'verbose_name': 'Mobile Check-In Session',
                'verbose_name_plural': 'Mobile Check-In Sessions',
                'ordering': ['-started_at'],
            },
        ),
        migrations.CreateModel(
            name='NotificationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('EMAIL', 'Email'), ('SMS', 'SMS'), ('PUSH', 'Push Notification')], help_text='Type of notification sent', max_length=10)),
                ('recipient_email', models.EmailField(blank=True, help_text='Recipient email address', max_length=254)),
                ('recipient_phone', models.CharField(blank=True, help_text='Recipient phone number', max_length=20)),
                ('subject', models.CharField(blank=True, help_text='Rendered subject line', max_length=200)),
                ('content', models.TextField(help_text='Rendered notification content')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('SENT', 'Sent'), ('FAILED', 'Failed'), ('DELIVERED', 'Delivered'), ('BOUNCED', 'Bounced')], default='PENDING', help_text='Notification delivery status', max_length=20)),
                ('sent_at', models.DateTimeField(blank=True, help_text='When notification was sent', null=True)),
                ('delivered_at', models.DateTimeField(blank=True, help_text='When notification was delivered', null=True)),
                ('error_message', models.TextField(blank=True, help_text='Error message if delivery failed')),
                ('external_id', models.CharField(blank=True, help_text='External service message ID', max_length=100)),
                ('retry_count', models.IntegerField(default=0, help_text='Number of delivery retry attempts')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('booking', models.ForeignKey(blank=True, help_text='Associated booking', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='booking.booking')),
                ('checkin', models.ForeignKey(blank=True, help_text='Associated check-in', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='checkin.checkin')),
                ('template', models.ForeignKey(help_text='Template used for this notification', on_delete=django.db.models.deletion.CASCADE, related_name='sent_notifications', to='checkin.notificationtemplate')),
            ],
            options={
                'verbose_name': 'Notification Log',
                'verbose_name_plural': 'Notification Logs',
                'ordering': ['-created_at'],
            },
        ),
    ]
